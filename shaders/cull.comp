#version 460
layout(local_size_x = 64) in;

//Push constants
layout(push_constant) uniform constants {
	uint node_count;
};

//Structures
struct Mesh {
	vec4 lower_corner;
	vec4 upper_corner;
	uint material;
};
struct Node {
	mat4 transform;
	mat4 inverse_transform;
	uint mesh;
	uint flags;
};
struct DrawCommand {
	uint index_count;
	uint instance_count;
	uint firstIndex;
	int vertex_offset;
	uint first_instance;
};
struct Extra {
	uint node;
	uint primitive;
};

//Descriptors
layout(set=0, binding=0) uniform camera {
	mat4 view;
	mat4 projection;
	vec4 camera_pos;
};
layout(std430, set=0, binding=1) restrict readonly buffer mesh_storage {
	Mesh meshes[];
};
layout(std430, set=0, binding=2) restrict readonly buffer mesh_command_storage {
	DrawCommand mesh_commands[];
};
layout(std430, set=0, binding=3) restrict readonly buffer node_storage {
	Node nodes[];
};
layout(std430, set=0, binding=4) restrict writeonly buffer draw_command_storage {
	DrawCommand draw_commands[];
};
layout(std430, set=0, binding=5) restrict writeonly buffer extra_storage {
	Extra extras[];
};
layout(std430, set=0, binding=6) restrict buffer draw_count_storage {
	uint draw_count;
};

bool frustum_culling(Node node, Mesh mesh) {
	const vec4 lower_corner = mesh.lower_corner;
	const vec4 upper_corner = mesh.upper_corner;
	vec4 corners[8] = {
		lower_corner,
		vec4(lower_corner.x, lower_corner.y, upper_corner.z, 1),
		vec4(lower_corner.x, upper_corner.y, lower_corner.z, 1),
		vec4(lower_corner.x, upper_corner.y, upper_corner.z, 1),
		vec4(upper_corner.x, lower_corner.y, lower_corner.z, 1),
		vec4(upper_corner.x, lower_corner.y, upper_corner.z, 1),
		vec4(upper_corner.x, upper_corner.y, lower_corner.z, 1),
		upper_corner
	};
	//Transform corners into frustum space
	for (uint i = 0; i < 8; ++i) {
		corners[i] = projection * view * node.transform * corners[i];
		corners[i] /= corners[i].w;
	}
	//Check frustum planes
	bool excluded[6] = {true, true, true, true, true, true};
	for (uint i = 0; i < 8; ++i) {
		const vec4 corner = corners[i];
		excluded[0] = excluded[0] && corner.x < -1;
		excluded[1] = excluded[1] && corner.y < -1;
		excluded[2] = excluded[2] && corner.z < 0;
		excluded[3] = excluded[3] && corner.x > 1;
		excluded[4] = excluded[4] && corner.y > 1;
		excluded[5] = excluded[5] && corner.z > 1;
	}
	bool visible = true;
	for (uint i = 0; i < 6; ++i)
		visible = visible && !excluded[i];
	return visible;
}

void main() {
	const uint id = gl_GlobalInvocationID.x;
	if (id < node_count) {
		const Node node = nodes[id];
		const Mesh mesh = meshes[node.mesh];
		bool visible = bool(node.flags & 1);
		visible = visible && frustum_culling(node, mesh);
		if (visible) {
			const uint count = atomicAdd(draw_count, 1);
			draw_commands[count] = mesh_commands[node.mesh];
			extras[count] = Extra(id, node.mesh);
		}
	}
}
